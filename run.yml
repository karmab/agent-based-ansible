---
- hosts: localhost
  connection: local
  tasks:
  - name: Load pull_secret
    include_vars:
      file: "{{ pull_secret|default('openshift_pull.json') }}"
      name: pull_secret_data
  - name: Set pull_secret_data variable
    set_fact:
      pull_secret_data: "{{ pull_secret_data | to_json(separators=(',',':')) }}"
  - name: Grab disconnected ca
    register: ca_content
    ansible.builtin.shell:
      cmd: "openssl s_client -showcerts -connect {{ disconnected_url }} </dev/null 2>/dev/null | openssl x509 -outform PEM"
    when: disconnected_url is defined and ca is not defined
  - name: Set ca variable
    set_fact: 
     ca={{ ca_content.stdout }}
    when: disconnected_url is defined and ca is not defined
  - name: Create Billi directory to hold assets
    ansible.builtin.file:
      path: "{{ cluster }}"
      state: directory
      mode: '0755'
  - name: Strip extra hosts
    set_fact:
      hosts={{ hosts[:nodes|int] }}
    when: nodes is defined and nodes|int < hosts|length
  - name: Force sno when nodes is set to 1
    set_fact: 
      sno=True
    when: nodes is defined and nodes|int == 1
  - name: Render install config
    ansible.builtin.template:
      src: install-config.yaml.j2
      dest: "{{ cluster }}/install-config.yaml"
  - name: Render agent config
    ansible.builtin.template:
      src: agent-config.yaml.j2
      dest: "{{ cluster }}/agent-config.yaml"
  - name: Create manifest for workload partitioning
    block:
    - name: Create manifest directory
      ansible.builtin.file:
       path: "{{ manifests }}"
       state: directory
       mode: '0755'
    - name: Evaluate partitioning_data
      set_fact:
       partitioning_data: "{{ lookup('template', 'workload-partitioning/01-workload-partitioning.j2') }}"
    - name: Evaluate pinning_data
      set_fact:
       pinning_data: "{{ lookup('template', 'workload-partitioning/openshift-workload-pinning.j2') }}"
    - name: Render sno-workload-partitioning.yml
      ansible.builtin.template:
        src: workload-partitioning/sno-workload-partitioning.yml.j2
        dest: "{{ manifests }}/sno-workload-partitioning.yml"
    when: sno_cpuset is defined
  - name: Create Contrail manifests
    block:
    - name: Create manifest directory
      ansible.builtin.file:
       path: "{{ manifests }}"
       state: directory
       mode: '0755'
    - name: Set ignition_config_overrides
      set_fact:
        ignition_config_override: "{\"ignition\":{\"version\":\"3.1.0\"},\"systemd\":{\"units\":[{\"name\":\"ca-patch.service\",\"enabled\":true,\"contents\":\"[Service]\\nType=oneshot\\nExecStart=/usr/local/bin/ca-patch.sh\\n\\n[Install]\\nWantedBy=multi-user.target\"}]},\"storage\":{\"files\":[{\"path\":\"/usr/local/bin/ca-patch.sh\",\"mode\":720,\"contents\":{\"source\":\"data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKc3VjY2Vzcz0wCnVudGlsIFsgJHN1Y2Nlc3MgLWd0IDEgXTsgZG8KICB0bXA9JChta3RlbXApCiAgY2F0IDw8RU9GPiR7dG1wfSB8fCB0cnVlCmRhdGE6CiAgcmVxdWVzdGhlYWRlci1jbGllbnQtY2EtZmlsZTogfAokKHdoaWxlIElGUz0gcmVhZCAtYSBsaW5lOyBkbyBlY2hvICIgICAgJGxpbmUiOyBkb25lIDwgPChjYXQgL2V0Yy9rdWJlcm5ldGVzL2Jvb3RzdHJhcC1zZWNyZXRzL2FnZ3JlZ2F0b3ItY2EuY3J0KSkKRU9GCiAgS1VCRUNPTkZJRz0vZXRjL2t1YmVybmV0ZXMvYm9vdHN0cmFwLXNlY3JldHMva3ViZWNvbmZpZyBrdWJlY3RsIC1uIGt1YmUtc3lzdGVtIHBhdGNoIGNvbmZpZ21hcCBleHRlbnNpb24tYXBpc2VydmVyLWF1dGhlbnRpY2F0aW9uIC0tcGF0Y2gtZmlsZSAke3RtcH0KICBpZiBbWyAkPyAtZXEgMCBdXTsgdGhlbgoJcm0gJHt0bXB9CglzdWNjZXNzPTIKICBmaQogIHJtICR7dG1wfQogIHNsZWVwIDYwCmRvbmUK\"}}]},\"kernelArguments\":{\"shouldExist\":[\"ipv6.disable=1\"]}}"
    - name: Template contrail script
      template:
        src: contrail.sh.j2
        dest: contrail.sh
    - name: Run Contrail script
      ansible.builtin.command:
        cmd: bash contrail.sh
    when: network_type == 'Contrail'
  - name: Create Billi directory to hold assets
    ansible.builtin.file:
      path: "{{ cluster }}/openshift"
      state: directory
      mode: '0755'
    when: manifests is directory
  - name: Copy manifests
    copy:
      src: "{{ manifests }}/"
      dest: "{{ cluster }}/openshift"
    when: manifests is directory
  - name: Grab openshift-client from internet
    ansible.builtin.unarchive:
      src: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz"
      dest: "."
      remote_src: true
      creates: oc
  - name: Template get_installer.sh.j2
    template:
      src: get_installer.sh.j2
      dest: get_installer.sh
    when: disconnected_url is not defined
  - name: Grab openshift-install from internet
    ansible.builtin.command:
      cmd: bash get_installer.sh
      creates: openshift-install
#  - meta: end_play
    when: disconnected_url is not defined
  - name: Grab openshift-install from disconnected registry
    ansible.builtin.command:
      cmd: "./oc adm release extract --registry-config {{ pull_secret|default('openshift_pull.json') }} --command=openshift-install --to . {{ disconnected_url }}/{{ disconnected_prefix|default('ocp4') }}:{{ version|default('4.12-x86_64') }} --insecure"
      creates: openshift-install
    when: disconnected_url is defined
  - name: Generate manifests
    ansible.builtin.command:
      cmd: "./openshift-install agent create cluster-manifests --dir {{ cluster }}"
  - name: Generate iso
    ansible.builtin.command:
      cmd: "./openshift-install agent create image --dir {{ cluster }} --log-level debug"
      creates: "{{ cluster }}/agent.x86_64.iso"
  - name: Patch iso
    block:
    - name: Template Patch iso script
      template:
        src: patch_iso.sh.j2
        dest: patch_iso.sh
    - name: Run Patch iso script
      ansible.builtin.command:
        cmd: bash patch_iso.sh
    when: ignition_config_override is defined
  - name: Remove old agent iso
    ansible.builtin.file:
      path: "/var/www/html/{{ cluster }}.iso"
      state: absent
  - name: Copy agent iso to /var/www/html
    become: yes
    command: "cp {{ cluster }}/agent.x86_64.iso /var/www/html/{{ cluster }}.iso"
  - name: Make agent iso available
    become: yes
    file:
      path: "/var/www/html/{{ cluster }}.iso"
      owner: apache
      group: apache
  - name: Boot hosts with iso
    ansible.builtin.command:
      cmd: "{{ playbook_dir }}/boot.py {{Â ansible_inventory_sources[0] }} {{ nodes|default(3) }}"
  - name: Remove agent iso
    ansible.builtin.file:
      path: "{{ cluster }}/agent.x86_64.iso"
      state: absent
  - name: Remove install-config.yaml
    ansible.builtin.file:
      path: "{{ cluster }}/install-config.yaml"
      state: absent
  - name: Remove agent-config.yaml
    ansible.builtin.file:
      path: "{{ cluster }}/agent-config.yaml"
      state: absent
  - name: Wait for install to complete
    ansible.builtin.command:
      cmd: "./openshift-install wait-for install-complete --dir {{ cluster }} --log-level debug"
    register: installresult
    until: installresult is not failed
    retries: 2
  - name: Template install_operators.sh.j2
    template:
      src: install_operators.sh.j2
      dest: install_operators.sh
    when: operators is defined and operators|length>0
  - name: Install operators
    ansible.builtin.command:
      cmd: bash install_operators.sh
    when: operators is defined and operators|length>0
  - name: Execute extra manifests
    ansible.builtin.command:
      cmd: "oc create -f {{ extra_manifests }}"
    when: extra_manifests is directory
